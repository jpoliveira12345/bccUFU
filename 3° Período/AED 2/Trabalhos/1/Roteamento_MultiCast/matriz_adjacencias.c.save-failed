#include <stdio.h>
#include <stdlib.h>
#include "matriz_adjacencias.h"

struct Grafo{
    int qte_arestas;
    int* grau;
    int** aresta_custo;
    int** aresta_delay;
    int** aresta_capacidade;
    int** aresta_trafego_atual;
    int qte_vertices;
};

grafo_ma* leArquivo_ma(grafo_ma* g, char n[]){
    FILE* arq;
    puts(n);
    if((arq = fopen(n,"r"))==NULL){
        printf("Nao foi possivel abrir o arquivo\n");
        return NULL;
    }else{
        grafo_la *g = cria_grafo_ma(numLinhas);
        int custo,delay,capac,trafego,v1,v2;
        fclose(arq);
        arq = fopen(n,"r");
        while((fscanf(arq,"%d - %d: %d %d %d %d",&v1,&v2,&capac,&delay,&custo,&trafego))!=EOF){
            if(insere_aresta_ma(g,v1,v2,capac,delay,custo,trafego))
                printf("Inserindo: %d - %d: %d %d %d %d\n",v1,v2,capac,delay,custo,trafego);
        }
        return g;
    }
    fclose(arq);
}


int gravaArquivo_ma(grafo_ma* g, char arq[]){
    FILE* f;
    int i,j;
    if((f = fopen(arq,"w"))!=NULL){
        for(i=0;i<g->qte_vertices;i++){
            for(j=0;j<g->qte_vertices;j++){
                if(g->aresta_custo[i][j]!= 0){
                    fprintf(f,"%d - %d: %d %d %d %d\n",i,j,g->aresta_custo[i][j],g->aresta_capacidade[i][j],g->aresta_delay[i][j],g->aresta_trafego_atual[i][j]);
                }
            }
        }
    }else {
        printf("Erro ao abrir o arquivo\n");
        return 0;
    }
    fclose(f);
    return 1;
}

int ehAdjacente_ma(grafo_ma* g, int v1,int v2){
    if(g->aresta_custo[v1][v2]>0&&
       g->aresta_delay[v1][v2]>0&&
       g->aresta_capacidade[v1][v2]>0&&
       g->aresta_trafego_atual[v1][v2]>0) return 1;
    return 0;
}



int numVertices_ma(grafo_ma* g){
    return (g->qte_vertices);
}
int grauVertice_ma(grafo_ma *g,int v){
    return (g->grau[v]);
}
grafo_ma* cria_grafo_ma(int quantidade){
    int i;
    if(quantidade<1) return NULL;
    grafo_ma *g = (grafo_ma*) malloc(sizeof(grafo_ma));
    if(g != NULL){
        g->qte_arestas = 0;
        g->qte_vertices = quantidade;
        g->grau = (int*) calloc(sizeof(int),quantidade);

            //aresta de custo

        g->aresta_custo = (int**) calloc(sizeof(int*),quantidade);
        if(g->aresta_custo == NULL) return NULL;
        for(i=0;i<quantidade;i++){
            g->aresta_custo[i] = (int*) calloc(sizeof(int),quantidade);
            if(g->aresta_custo[i]==NULL) return NULL;
        }

                    //aresta de delay

        g->aresta_delay = (int**) calloc(sizeof(int*),quantidade);
        if(g->aresta_delay == NULL) return NULL;
        for(i=0;i<quantidade;i++){
            g->aresta_delay[i] = (int*) calloc(sizeof(int),quantidade);
            if(g->aresta_delay[i]==NULL) return NULL;
        }

        //aresta de capacidade
        g->aresta_capacidade = (int**) calloc(sizeof(int*),quantidade);
        if(g->aresta_capacidade == NULL) return NULL;
        for(i=0;i<quantidade;i++){
            g->aresta_capacidade[i] = (int*) calloc(sizeof(int),quantidade);
            if(g->aresta_capacidade[i]==NULL) return NULL;
        }

        //aresta de trafego atual
        g->aresta_trafego_atual = (int**) calloc(sizeof(int*),quantidade);
        if(g->aresta_trafego_atual == NULL) return NULL;
        for(i=0;i<quantidade;i++){
            g->aresta_trafego_atual[i] = (int*) calloc(sizeof(int),quantidade);
            if(g->aresta_trafego_atual[i]==NULL) return NULL;
        }

    }
    return g;
}

int insere_aresta_ma(grafo_ma** g,int vertice1, int vertice2,int capacidade,int delay,int custo, int trafego_atual){
    if(g==NULL||vertice1<0||vertice2<0||vertice1>(*g)->qte_vertices||vertice2>(*g)->qte_vertices)return -1;
    if((*g)->aresta_custo[vertice1][vertice2]== custo||(*g)->aresta_custo[vertice2][vertice1]== custo)return 0;
    if(vertice1==vertice2)
        (*g)->grau[vertice1]+=2;
    else{
        (*g)->grau[vertice1]++;
        (*g)->grau[vertice2]++;
    }
    (*g)->qte_arestas++;
    //custo
    (*g)->aresta_custo[vertice1][vertice2] = custo;
    (*g)->aresta_custo[vertice2][vertice1] = custo;
    //delay
    (*g)->aresta_delay[vertice1][vertice2] = delay;
    (*g)->aresta_delay[vertice2][vertice1] = delay;
    //capacidade
    (*g)->aresta_capacidade[vertice1][vertice2] = capacidade;
    (*g)->aresta_capacidade[vertice2][vertice1] = capacidade;
    //trafego_total
    (*g)->aresta_trafego_atual[vertice1][vertice2] = trafego_atual;
    (*g)->aresta_trafego_atual[vertice2][vertice1] = trafego_atual;
    return 1;
}

int remove_aresta_ma(grafo_ma **g, int vertice1, int vertice2){
    if(g==NULL||vertice1<0||vertice2<0||vertice1>(*g)->qte_vertices||vertice2>(*g)->qte_vertices)return -1;
    //if(!verifica_aresta_ma((*g),vertice1,vertice2)) return 0;
    if(vertice1==vertice2)(*g)->grau[vertice1]--;
    else{
        (*g)->grau[vertice1]--;
        (*g)->grau[vertice2]--;
    }
    (*g)->qte_arestas--;

    (*g)->aresta_capacidade[vertice1][vertice2] = 0;
    (*g)->aresta_capacidade[vertice2][vertice1] = 0;
    //custo
    (*g)->aresta_custo[vertice1][vertice2] = 0;
    (*g)->aresta_custo[vertice2][vertice1] = 0;
    //trafego_atual
    (*g)->aresta_trafego_atual[vertice1][vertice2] = 0;
    (*g)->aresta_trafego_atual[vertice2][vertice1] = 0;
    //delay
    (*g)->aresta_delay[vertice1][vertice2] = 0;
    (*g)->aresta_delay[vertice2][vertice1] = 0;
    return 1;
}

void libera_grafo_ma(grafo_ma* g){
    int i;
    if(g!=NULL){
        //custo
        if((g->aresta_custo)!=NULL){
            for(i=0;i<(g->qte_vertices);i++){
                free(g->aresta_custo[i]);
            }
            free(g->aresta_custo);
        }
        //delay
        if((g->aresta_delay)!=NULL){
            for(i=0;i<(g->qte_vertices);i++){
                free(g->aresta_delay[i]);
            }
            free(g->aresta_delay);
        }
        //capacidade
        if((g->aresta_capacidade)!=NULL){
            for(i=0;i<(g->qte_vertices);i++){
                free(g->aresta_capacidade[i]);
            }
            free(g->aresta_capacidade);
        }
            free(g->grau);
        //trafego_atual
        if((g->aresta_trafego_atual)!=NULL){
            for(i=0;i<(g->qte_vertices);i++){
                free(g->aresta_trafego_atual[i]);
            }
            free(g->aresta_trafego_atual);
        }
            free(g->grau);
        }
         free(g);
}
