#include <stdio.h>
#include <stdlib.h>
#include"heap.h"
void PQinsert(int elem, int pri, que* Q){
    int i;       /* Function for Insert operation */
    if( Qfull(*Q)) printf("\n\n Overflow!!!!\n\n");
    else{
        i=Q->siz;
        Q->siz+=1;
        while(Q->filaP[i].pr >= pri && i >= 0) /* Find location for new elem */
        {
            Q->filaP[i+1]=Q->filaP[i];
            i--;
        }
        Q->filaP[i+1].ele=elem;
        Q->filaP[i+1].pr=pri;
    }
}

int Qfull(que Q){
    if(Q.siz==(Q.siz)-1) return 1;
    return 0;
}
int Qempty(que Q){
    /* Function to Check Queue Empty */
    if(Q.frente > Q.costa) return 1;
    return 0;
}
que Criafila(){
    que* Q;
    Q = (que*)malloc(5*sizeof(que));
    Q->siz=0;
    Q->frente = 0;
    Q->costa = -1;
    return *Q;
}
// PRONTO ATÉ AKI
void display(que Q){
    /* Function to display status of Queue */
    int i;
    if(Qempty(Q)) printf(" \n Empty Queue\n");
    else{
        printf("Front->");
        for(i=Q.frente; i<=Q.costa; i++)
            printf("[%d,%d] ",Q.filaP[i].ele,Q.filaP[i].pr);
        printf("<-Rear");
    }
}
//PriorityQ Qdelete(que* Q){
//    /* Function for Delete operation */
//    PriorityQ p;
//    if(Qempty()){
//        printf("\n\nUnderflow!!!!\n\n");
//        p.ele=-1;
//        p.pr=-1;
//        return(p);
//    }
//    else{
//        p=PQ[f];
//        f=f+1;
//        return(p);
//    }
//}

//
//
//

